# Deploy instructions
#
# see also: https://bitbucket.org/oceanpremium/ocean-premium-api/wiki/Deploy%20to%20different%20environments
#
# 0) Uncomment the configurations block in the parent build.gradle file in the root of the project, that looks something like this:
#
#    configurations {
#      runtime.exclude module: "spring-boot-starter-web"
#       ...
#    }
#
# 1) Rename this file to serverless.yml (thus rename the default existing serverless.yml to serverless-template-dev.yml)
#
# 2) Set parent build.gradle variable in the deploy task to staging: def stageToDeployTo = "staging"
#
# 3) Either deploy through gradle task:
#
# $ ./gradlew products:deploy -Pstage=staging --stacktrace
#
# or directly via server-less (which is called by the `deploy` Gradle task):
#
# $ sls deploy --region eu-west-1 --verbose --stage staging
#
# 4) Rename this file back to: serverless-template-staging.yml and thus rename serverless-template-dev.yml back to serverless.yml
#    and set in the build.gradle, variable back to stageToDeployTo = "dev"

# For full config options, check: https://docs.serverless.com

# The provider of the cloud instance and its needed runtime configuration
provider:
  # Cloud provider
  name: aws
  # JVM
  runtime: java8
  # The S3 Bucket used for deploying the archive
  deploymentBucket: oceanpremium-deploy
  # The RAM size (MB) used by the function
  memorySize: 512
  # The default timeout (seconds)
  timeout: 30
  # The environment to deploy to
  stage:  ${opt:stage, 'staging'}

# The service name which is used to create the stack
service:
  name: ocean-premium-products-api

# Custom variables
custom:
  apiPrefix: api
  apiVersion: v1
  # results in, for example: api/v1
  apiPathPrefix: ${self:custom.apiPrefix}/${self:custom.apiVersion}

# The default region to be deployed to
region: eu-west-1

# The path and the name of the deploy-able archive
package:
  artifact: build/libs/products-0.0.1-SNAPSHOT-aws.jar

# The functions defined by HTTP verb / path and parameters (CRUD)
functions:
  get-product-api-docs-staging:
    # The function handler to be called for this endpoint
    handler: com.oceanpremium.api.products.Handler::handleRequest
    name: get-product-api-docs-staging
    events:
      - http:
          # The URI of the endpoint
          path: /${self:custom.apiPathPrefix}/products/docs
          # The HTTP verb
          method: get
          # Additional endpoint configurations like enabling CORS
          cors: true
          # The default headers mandatory for this endpoint
          headers:
            - Content-Type
          allowCredentials: false
    environment:
      SENTRY_DSN: ${file(properties.json):products.sentry_dsn}
      slack_webhook_jvt: ${file(properties.json):products.slack.webhook_jvt}
      current_rms_token: ${file(properties.json):products.current_rms.token}
      current_rms_subdomain: ${file(properties.json):products.current_rms.subdomain}
      current_rms_api_url: ${file(properties.json):products.current_rms.api_url}
      emailer_smtp_host: ${file(properties.json):products.emailer.smtp_host}
      emailer_username: ${file(properties.json):products.emailer.username}
      emailer_password: ${file(properties.json):products.emailer.password}
      emailer_sender: ${file(properties.json):products.emailer.sender}
      emailer_back_office: ${file(properties.json):products.emailer.back_office}
  get-products-staging:
    # The function handler to be called for this endpoint
    handler: com.oceanpremium.api.products.Handler::handleRequest
    name: get-products-staging
    events:
      - http:
          # The URI of the endpoint
          path: /${self:custom.apiPathPrefix}/products
          # The HTTP verb
          method: get
          # Additional endpoint configurations like enabling CORS
          cors: true
          # The default headers mandatory for this endpoint
          headers:
            - Content-Type
          allowCredentials: false
    environment:
      SENTRY_DSN: ${file(properties.json):products.sentry_dsn}
      slack_webhook_jvt: ${file(properties.json):products.slack.webhook_jvt}
      slack_webhook_op: ${file(properties.json):products.slack.webhook_op}
      current_rms_token: ${file(properties.json):products.current_rms.token}
      current_rms_subdomain: ${file(properties.json):products.current_rms.subdomain}
      current_rms_api_url: ${file(properties.json):products.current_rms.api_url}
      emailer_smtp_host: ${file(properties.json):products.emailer.smtp_host}
      emailer_username: ${file(properties.json):products.emailer.username}
      emailer_password: ${file(properties.json):products.emailer.password}
      emailer_sender: ${file(properties.json):products.emailer.sender}
      emailer_back_office: ${file(properties.json):products.emailer.back_office}
  get-product-by-id-staging:
    # The function handler to be called for this endpoint
    handler: com.oceanpremium.api.products.Handler::handleRequest
    name: get-product-by-id-staging
    events:
      - http:
          # The URI of the endpoint
          path: /${self:custom.apiPathPrefix}/products/{productId}
          # The HTTP verb
          method: get
          # Additional endpoint configurations like enabling CORS
          cors: true
          # The default headers mandatory for this endpoint
          headers:
            - Content-Type
          request:
            parameters:
              paths:
                productId: true
          allowCredentials: false
    environment:
      SENTRY_DSN: ${file(properties.json):products.sentry_dsn}
      slack_webhook_jvt: ${file(properties.json):products.slack.webhook_jvt}
      slack_webhook_op: ${file(properties.json):products.slack.webhook_op}
      current_rms_token: ${file(properties.json):products.current_rms.token}
      current_rms_subdomain: ${file(properties.json):products.current_rms.subdomain}
      current_rms_api_url: ${file(properties.json):products.current_rms.api_url}
      emailer_smtp_host: ${file(properties.json):products.emailer.smtp_host}
      emailer_username: ${file(properties.json):products.emailer.username}
      emailer_password: ${file(properties.json):products.emailer.password}
      emailer_sender: ${file(properties.json):products.emailer.sender}
      emailer_back_office: ${file(properties.json):products.emailer.back_office}
  get-product-groups-staging:
    # The function handler to be called for this endpoint
    handler: com.oceanpremium.api.products.Handler::handleRequest
    name: get-product-groups-staging
    events:
      - http:
          # The URI of the endpoint
          path: /${self:custom.apiPathPrefix}/products/groups
          # The HTTP verb
          method: get
          # Additional endpoint configurations like enabling CORS
          cors: true
          # The default headers mandatory for this endpoint
          headers:
            - Content-Type
          allowCredentials: false
    environment:
      SENTRY_DSN: ${file(properties.json):products.sentry_dsn}
      slack_webhook_jvt: ${file(properties.json):products.slack.webhook_jvt}
      slack_webhook_op: ${file(properties.json):products.slack.webhook_op}
      current_rms_token: ${file(properties.json):products.current_rms.token}
      current_rms_subdomain: ${file(properties.json):products.current_rms.subdomain}
      current_rms_api_url: ${file(properties.json):products.current_rms.api_url}
      emailer_smtp_host: ${file(properties.json):products.emailer.smtp_host}
      emailer_username: ${file(properties.json):products.emailer.username}
      emailer_password: ${file(properties.json):products.emailer.password}
      emailer_sender: ${file(properties.json):products.emailer.sender}
      emailer_back_office: ${file(properties.json):products.emailer.back_office}
  get-products-inventory-staging:
    # The function handler to be called for this endpoint
    handler: com.oceanpremium.api.products.Handler::handleRequest
    name: get-products-inventory-staging
    events:
      - http:
          # The URI of the endpoint
          path: /${self:custom.apiPathPrefix}/products/inventory
          # The HTTP verb
          method: get
          # Additional endpoint configurations like enabling CORS
          cors: true
          # The default headers mandatory for this endpoint
          headers:
            - Content-Type
          allowCredentials: false
    environment:
      SENTRY_DSN: ${file(properties.json):products.sentry_dsn}
      slack_webhook_jvt: ${file(properties.json):products.slack.webhook_jvt}
      slack_webhook_op: ${file(properties.json):products.slack.webhook_op}
      current_rms_token: ${file(properties.json):products.current_rms.token}
      current_rms_subdomain: ${file(properties.json):products.current_rms.subdomain}
      current_rms_api_url: ${file(properties.json):products.current_rms.api_url}
      emailer_smtp_host: ${file(properties.json):products.emailer.smtp_host}
      emailer_username: ${file(properties.json):products.emailer.username}
      emailer_password: ${file(properties.json):products.emailer.password}
      emailer_sender: ${file(properties.json):products.emailer.sender}
      emailer_back_office: ${file(properties.json):products.emailer.back_office}
  post-product-batch-availability-staging:
    # The function handler to be called for this endpoint
    handler: com.oceanpremium.api.products.Handler::handleRequest
    name: post-product-batch-availability-staging
    events:
      - http:
          # The URI of the endpoint
          path: /${self:custom.apiPathPrefix}/products/availability
          # The HTTP verb
          method: post
          # Additional endpoint configurations like enabling CORS
          cors: true
          # The default headers mandatory for this endpoint
          headers:
            - Content-Type
          allowCredentials: false
    environment:
      SENTRY_DSN: ${file(properties.json):products.sentry_dsn}
      slack_webhook_jvt: ${file(properties.json):products.slack.webhook_jvt}
      slack_webhook_op: ${file(properties.json):products.slack.webhook_op}
      current_rms_token: ${file(properties.json):products.current_rms.token}
      current_rms_subdomain: ${file(properties.json):products.current_rms.subdomain}
      current_rms_api_url: ${file(properties.json):products.current_rms.api_url}
      emailer_smtp_host: ${file(properties.json):products.emailer.smtp_host}
      emailer_username: ${file(properties.json):products.emailer.username}
      emailer_password: ${file(properties.json):products.emailer.password}
      emailer_sender: ${file(properties.json):products.emailer.sender}
      emailer_back_office: ${file(properties.json):products.emailer.back_office}
  post-product-order-placement-staging:
    # The function handler to be called for this endpoint
    handler: com.oceanpremium.api.products.Handler::handleRequest
    name: post-product-order-placement-staging
    events:
      - http:
          # The URI of the endpoint
          path: /${self:custom.apiPathPrefix}/products/orders
          # The HTTP verb
          method: post
          # Additional endpoint configurations like enabling CORS
          cors: true
          # The default headers mandatory for this endpoint
          headers:
            - Content-Type
          allowCredentials: false
    environment:
      SENTRY_DSN: ${file(properties.json):products.sentry_dsn}
      slack_webhook_jvt: ${file(properties.json):products.slack.webhook_jvt}
      slack_webhook_op: ${file(properties.json):products.slack.webhook_op}
      current_rms_token: ${file(properties.json):products.current_rms.token}
      current_rms_subdomain: ${file(properties.json):products.current_rms.subdomain}
      current_rms_api_url: ${file(properties.json):products.current_rms.api_url}
      emailer_smtp_host: ${file(properties.json):products.emailer.smtp_host}
      emailer_username: ${file(properties.json):products.emailer.username}
      emailer_password: ${file(properties.json):products.emailer.password}
      emailer_sender: ${file(properties.json):products.emailer.sender}
      emailer_back_office: ${file(properties.json):products.emailer.back_office}

