# For full config options, check: https://docs.serverless.com

# The provider of the cloud instance and its needed runtime configuration
provider:
  # Cloud provider
  name: aws
  # JVM
  runtime: java8
  # The S3 Bucket used for deploying the archive
  deploymentBucket: oceanpremium-deploy
  # The RAM size (MB) used by the function
  memorySize: 512
  # The default timeout (seconds)
  timeout: 30

  # The stage to deploy, stages:(dev | test |  stage | prod) - defaults to dev
  #
  # Either deploy through gradle task:
  #
  # $ ./gradlew moduleName: deploy -Pstage=<stage_name> --stacktrace
  #
  # or directly via server-less (which is called by the `deploy` Gradle task):
  #
  # $ sls deploy --region eu-west-1 --verbose --stage <stage_name>
  #
  stage:  ${opt:stage, 'dev'}
#  stage:  ${opt:stage, 'staging'}
#  stage:  ${opt:stage, 'prod'}

# The service name which is used to create the stack
service:
  name: ocean-premium-locations-api

# Custom variables
custom:
  apiPrefix: api
  apiVersion: v1
  # results in, for example: api/v1
  apiPathPrefix: ${self:custom.apiPrefix}/${self:custom.apiVersion}

# The default region to be deployed to
region: eu-west-1

# The path and the name of the deploy-able archive
package:
  artifact: build/libs/locations-0.0.1-SNAPSHOT-aws.jar

# The functions defined by HTTP verb / path and parameters (CRUD)
functions:
  get-location-api-docs:
#  get-location-api-docs-staging:
#  get-location-api-docs-prod:
    # The function handler to be called for this endpoint
    handler: com.oceanpremium.api.locations.Handler::handleRequest
    name: get-locations-api-docs
#    name: get-locations-api-docs-staging
#    name: get-locations-api-docs-prod
    events:
      - http:
          # The URI of the endpoint
          path: /${self:custom.apiPathPrefix}/locations/docs
          # The HTTP verb
          method: get
          # Additional endpoint configurations like enabling CORS
          cors: true
          # The default headers mandatory for this endpoint
          headers:
            - Content-Type
          allowCredentials: false
    environment:
      SENTRY_DSN: ${file(properties.json):locations.sentry_dsn}
      slack_webhook_jvt: ${file(properties.json):locations.slack.webhook_jvt}
      current_rms_token: ${file(properties.json):locations.current_rms.token}
      current_rms_subdomain: ${file(properties.json):locations.current_rms.subdomain}
      current_rms_api_url: ${file(properties.json):locations.current_rms.api_url}
  get-locations:
#  get-locations-staging:
#  get-locations-prod:
    # The function handler to be called for this endpoint
    handler: com.oceanpremium.api.locations.Handler::handleRequest
    name: get-locations
#    name: get-locations-staging
#    name: get-locations-prod
    events:
      - http:
          # The URI of the endpoint
          path: /${self:custom.apiPathPrefix}/locations
          # The HTTP verb
          method: get
          # Additional endpoint configurations like enabling CORS
          cors: true
          # The default headers mandatory for this endpoint
          headers:
            - Content-Type
          allowCredentials: false
    environment:
      SENTRY_DSN: ${file(properties.json):locations.sentry_dsn}
      slack_webhook_jvt: ${file(properties.json):locations.slack.webhook_jvt}
      current_rms_token: ${file(properties.json):locations.current_rms.token}
      current_rms_subdomain: ${file(properties.json):locations.current_rms.subdomain}
      current_rms_api_url: ${file(properties.json):locations.current_rms.api_url}
