import com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer

apply plugin: 'org.sonarqube'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'

buildscript {
    ext {
        kotlinVersion = '1.3.31'
        springBootVersion = '2.1.3.RELEASE'
        shadowVersion = '2.0.4' // Keep it to version 2.0.4 as this works on CI, lower/ higher (thus) other versions don't
        springCloudStarterVersion = '2.0.1.RELEASE'
        jacksonVersion = '2.9.5'
        gradleCheckVersion = "3.2.1"
        sonarscannerVersion = '2.6.2'
        okHttpVersion = '3.14.0'
        sentryVersion = '1.7.22'
        lamdaLoggingVersion = '1.0.3'
        lambaSpringContainerVersion = '1.3.1'
        jUnitVersion = '4.12'
        kotlinTestVersion = '1.3.5'
        springDependencyManagementVersion = '1.0.3.RELEASE'
        retrofitVersion = '2.4.0'
        retrofitInterceptorVersion = '3.14.1'
    }

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven { setUrl("https://plugins.gradle.org/m2/") }
    }

    dependencies {
        /**
         * Kotlin library
         *
         * @link https://kotlinlang.org/docs/reference/compiler-plugins.html#all-open-compiler-plugin
         */
        classpath ("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        classpath ("org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion")
        classpath ("org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion")
        classpath ("org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion")

        // Spring - gradle plugin
        classpath ("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")

        // Spring - dependency management plugin
        classpath ("io.spring.gradle:dependency-management-plugin:$springDependencyManagementVersion")

        // Shaded JAR
        classpath ("com.github.jengelman.gradle.plugins:shadow:${shadowVersion}")

        // Sonar - scanner
        classpath ("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarscannerVersion")
    }
}

group = 'com.oceanpremium'
version = '0.0.1-SNAPSHOT'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

allprojects {
    apply plugin: 'idea'
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring' // instead of "kotlin-allopen"
    apply plugin: 'kotlinx-serialization'
    apply plugin: 'kotlin-noarg'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'jacoco'

    group = 'com.oceanpremium'
    version = '0.0.1-SNAPSHOT'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url 'https://dl.bintray.com/konrad-kaminski/maven' }
        maven { setUrl('https://plugins.gradle.org/m2/') }
    }

    dependencyManagement {
        imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
    }

    springBoot { mainClassName = "com.oceanpremium.api.${project.name}.Driver" }
        
    dependencies {
        // Spring Starter - Locally running the functions for local development - excluded from deploy-able jar
        compile ("org.springframework.boot:spring-boot-starter-web") {
            // exclude Tomcat web server, this project will use Jetty web server
            exclude module: "spring-boot-starter-tomcat"
        }

        // Spring - Jetty - Web server, provisions project with Jetty web server instead of (default) Tomcat web server,
        // for local development - excluded from deploy-able jar
        compile ("org.springframework.boot:spring-boot-starter-jetty")

        // Spring boot - dev tools - allows hot swapping - excluded from deploy-able jar
        compile ("org.springframework.boot:spring-boot-devtools")

        // Kotlin - Library
        compile ("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
        compile ("org.jetbrains.kotlin:kotlin-reflect")

        // Jackson - JSON Serialization / Deserialization
        compile ("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")
        compile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")

        // Spring test - test framework
        testCompile ("org.springframework.boot:spring-boot-starter-test")
        testCompile ("junit:junit:$jUnitVersion")
        testCompile ("io.kotlintest:kotlintest:$kotlinTestVersion")

        // AWS - provision the Spring Boot application with the AWS lambda container so it can run as an AWS lambda Function

        // Lambda-logging - AWS logging
        compile ("io.symphonia:lambda-logging:$lamdaLoggingVersion")

        // Lambda - Java container for Spring
        compile ("com.amazonaws.serverless:aws-serverless-java-container-spring:$lambaSpringContainerVersion")

        // OkHttp - Http client
        compile ("com.squareup.okhttp3:okhttp:$okHttpVersion")

        // Sentry.io - Error monitoring
        compile ("io.sentry:sentry-spring:$sentryVersion")

        // Retrofit
        compile ("com.squareup.retrofit2:retrofit:${retrofitVersion}")
        compile ("com.squareup.retrofit2:converter-gson:${retrofitVersion}")
        compile ("com.squareup.okhttp3:logging-interceptor:3.14.1")
    }

    /**
     * Configure the shaded jar with custom settings, like for example the main attribute class.
     */
    jar {
        enabled = true
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    }

    bootJar {
        enabled = true
    }

    /**
     * Configure the shaded jar.
     */
    shadowJar {
        // append the classifier to the build archive as identifier for deploy-able jar
        classifier = 'aws'

        // Required for Spring
        mergeServiceFiles()

        append 'META-INF/spring.handlers'
        append 'META-INF/spring.schemas'
        append 'META-INF/spring.tooling'

        transform(PropertiesFileTransformer) {
            paths = [
                    'META-INF/spring.factories',
                    'META-INF/spring.provides',
                    'META-INF/spring-autoconfigure-metadata.properties',
            ]
            mergeStrategy = "append"
        }
    }

    /**
     * Note that: we don't want the following dependency in our shadowedJar
     * because, it is NOT need when creating an archive for deploying a Function to the cloud,
     * it is used ONLY for LOCAL development.
     */
    //FIXME For now manually uncomment this block on manual deployment
    configurations {
        runtime.exclude module: "spring-boot-starter-web"
        runtime.exclude module: "spring-boot-starter-test"
        runtime.exclude module: "spring-boot-devtools"
        runtime.exclude module: "spring-boot-starter-jetty"
        runtime.exclude module: "junit"
        runtime.exclude module: "kotlintest"
        runtime.exclude module: "sonarqube-gradle-plugin"
    }

    jacocoTestReport {
        group = "Reporting"
        reports {
            xml.enabled true
            csv.enabled false
        }
    }

    test {
        reports {
            junitXml.enabled = true
            html.enabled = true
            reports.junitXml.destination = file("$buildDir/xml")
            reports.html.destination = file("$buildDir/html")
            testLogging.showStandardStreams = true
        }
    }

    /**
     * Tasks to deploy a server-less function module.
     */
    //noinspection GroovyAssignabilityCheck
    task deploy(type: Exec) {
        group 'ocean-premium'
        dependsOn("shadowJar")
        description 'Deploy serverless function to remote'

        def stageToDeployTo = "dev"

        if (project.hasProperty('stage')) {
            stageToDeployTo = property('stage')
        }

        commandLine 'sls', 'deploy', '--region' , 'eu-west-1', '--verbose', '--stage', "$stageToDeployTo"
    }
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
    }
}

test {
    reports {
        junitXml.enabled = true
        html.enabled = true
        reports.junitXml.destination = file("$buildDir/xml")
        reports.html.destination = file("$buildDir/html")
        testLogging.showStandardStreams = true
    }
}

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven { url 'https://dl.bintray.com/konrad-kaminski/maven' }
}

dependencies {
    // Register every gradle module in the top-level project dependencies list
    compile project(':core')
    compile project(':auth')
    compile project(':products')
}