import com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer
apply plugin: 'org.sonarqube'

buildscript {
    ext {
        kotlinVersion = '1.3.21'
        springBootVersion = '2.1.3.RELEASE'
        shadowVersion = '2.0.4' // Keep it to version 2.0.4 as this works on CI, lower/ higher (thus) other versions don't
        springCloudStarterVersion = '2.0.1.RELEASE'
        jacksonVersion = "2.9.5"
        gradleCheckVersion = "3.2.1"
        sonarscannerVersion = '2.6.2'
    }

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven { setUrl("https://plugins.gradle.org/m2/") }
    }

    dependencies {
        /**
         * Kotlin library
         *
         * @link https://kotlinlang.org/docs/reference/compiler-plugins.html#all-open-compiler-plugin
         */
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion"

        // Spring
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"

        // Shaded jar
        classpath "com.github.jengelman.gradle.plugins:shadow:${shadowVersion}"

        // Sonar
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarscannerVersion"
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'kotlin'
    apply plugin: "kotlin-spring" // instead of "kotlin-allopen"
    apply plugin: 'kotlinx-serialization'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'org.springframework.boot'

    group = 'com.oceanpremium'
    version = '0.0.1-SNAPSHOT'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        // Kotlin - Library
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
        implementation("org.jetbrains.kotlin:kotlin-reflect")

        // Jackson - JSON Serialization / Deserialization
        implementation "com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}"
        implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

        // Spring Starter - Locally running the functions for local development
        compile("org.springframework.boot:spring-boot-starter-web") {
            // exclude Tomcat web server, this project will use Jetty webserver
            exclude module: "spring-boot-starter-tomcat"
        }

        // Spring - Jetty - Web server, provisions project with Jetty web server instead of (default) Tomcat web server, for local development
        compile("org.springframework.boot:spring-boot-starter-jetty")

        // Spring boot - dev tools - allows hotswapping
        compile("org.springframework.boot:spring-boot-devtools")

        /**
         * Spring - Actuator - enables endpoint mapping overview in IntelliJ.
         * More info: https://blog.jetbrains.com/idea/2018/10/spring-boot-endpoints-and-kotlin/
         */
        compile("org.springframework.boot:spring-boot-starter-actuator")

        // AWS

        // Serverless - Java container for Spring
        implementation('com.amazonaws.serverless:aws-serverless-java-container-spring:1.3.1')

        // Lambda-logging - AWS logging
        implementation('io.symphonia:lambda-logging:1.0.3')

        // Spring test - test framework
        testCompile("org.springframework.boot:spring-boot-starter-test")
        testCompile 'junit:junit:4.12'
        testCompile 'io.kotlintest:kotlintest:1.3.5'
    }

    /**
     * Configure the shaded jar with custom settings, like the main attribute class.
     */
    jar {
        manifest {
            attributes(
                    'Main-Class' : 'com.oceanpremium.api.ApiDriver',
                    'Start-Class': 'com.oceanpremium.api.Handler'
            )
        }

        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    }

    /**
     * Configure the shaded jar.
     */
    shadowJar {
        // append the classifier to the build archive as identifier for deploy-able jar
        classifier = 'aws'

        // Required for Spring
        mergeServiceFiles()

        append 'META-INF/spring.handlers'
        append 'META-INF/spring.schemas'
        append 'META-INF/spring.tooling'

        transform(PropertiesFileTransformer) {
            paths = [
                    'META-INF/spring.factories',
                    'META-INF/spring.provides',
                    'META-INF/spring-autoconfigure-metadata.properties',
            ]
            mergeStrategy = "append"
        }
    }

    /**
     * Note that: we don't want the following dependency in our shadowedJar
     * because, it is NOT need when creating an archive for deploying a Function to the cloud,
     * it is used ONLY for LOCAL development.
     */
    configurations {
        runtime.exclude module: "sonarqube-gradle-plugin"
    }

    assemble.dependsOn = [shadowJar, bootJar]

    /**
     * Tasks to deploy a serverless function module.
     */
    //noinspection GroovyAssignabilityCheck
    task deploy(type: Exec) {
        group 'ocean-premium'
        dependsOn("shadowJar")
        description 'Deploy serverless function to remote'

        def stageToDeployTo = "dev"
        if (project.hasProperty('stage')) { stageToDeployTo = stage }
        println("Invoke Deploy for module: $project.name with stage to deploy to: $stageToDeployTo")
        commandLine 'sls', 'deploy', '--region' , 'eu-west-1', '--verbose', '--stage', "$stageToDeployTo"
    }
}

test {
    reports {
        junitXml.enabled = true
        html.enabled = true
        reports.junitXml.destination = file("$buildDir/xml")
        reports.html.destination = file("$buildDir/html")
        testLogging.showStandardStreams = true
    }
}

dependencies {
    // Register every gradle module in the top-level project dependencies list
    compile project(':core')
    compile project(':auth')
}