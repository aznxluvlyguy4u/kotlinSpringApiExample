import com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer

apply plugin: 'org.sonarqube'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'

buildscript {
    ext {
        kotlinVersion = '1.3.31'
        springBootVersion = '2.1.3.RELEASE'
        shadowVersion = '2.0.4' // Keep it to version 2.0.4 as this works on CI, lower/ higher (thus) other versions don't
        springCloudStarterVersion = '2.0.1.RELEASE'
        jacksonVersion = '2.9.5'
        gradleCheckVersion = "3.2.1"
        sonarscannerVersion = '2.6.2'
        okHttpVersion = '3.14.0'
        sentryVersion = '1.7.22'
        lamdaLoggingVersion = '1.0.3'
        lambaSpringContainerVersion = '1.3.1'
        jUnitVersion = '4.12'
        kotlinTestVersion = '1.3.5'
        springDependencyManagementVersion = '1.0.3.RELEASE'
        retrofitVersion = '2.4.0'
        retrofitInterceptorVersion = '3.14.1'
        thymeleafVersion = '3.0.11.RELEASE'
        thymeleafDialectVersion = '2.4.1'
        springContextSupportVersion = '5.1.7.RELEASE'
        springBootMailerVersion = '2.1.5.RELEASE'
        sesSdkVersion = '1.11.568'
        mailApiVersion = '1.6.2'
    }

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven { setUrl("https://plugins.gradle.org/m2/") }
    }

    dependencies {
        /**
         * Kotlin library
         *
         * @link https://kotlinlang.org/docs/reference/compiler-plugins.html#all-open-compiler-plugin
         */
        classpath ("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        classpath ("org.jetbrains.kotlin:kotlin-serialization:$kotlinVersion")
        classpath ("org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion")
        classpath ("org.jetbrains.kotlin:kotlin-noarg:$kotlinVersion")

        // Spring - gradle plugin
        classpath ("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")

        // Spring - dependency management plugin
        classpath ("io.spring.gradle:dependency-management-plugin:$springDependencyManagementVersion")

        // Shaded JAR
        classpath ("com.github.jengelman.gradle.plugins:shadow:${shadowVersion}")

        // Sonar - scanner
        classpath ("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarscannerVersion")
    }
}

group = 'com.oceanpremium'
version = '0.0.1-SNAPSHOT'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

allprojects {
    apply plugin: 'idea'
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring' // instead of "kotlin-allopen"
    apply plugin: 'kotlinx-serialization'
    apply plugin: 'kotlin-noarg'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'jacoco'

    group = 'com.oceanpremium'
    version = '0.0.1-SNAPSHOT'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url 'https://dl.bintray.com/konrad-kaminski/maven' }
        maven { setUrl('https://plugins.gradle.org/m2/') }
    }

    dependencyManagement {
        imports {
            mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.394'
        }
    }
    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
            mavenBom("com.amazonaws:aws-java-sdk-bom:$sesSdkVersion")
        }
    }

    springBoot { mainClassName = "com.oceanpremium.api.${project.name}.Driver" }

    dependencies {
        // Spring Starter - Locally running the functions for local development - excluded from deploy-able jar
        compile ("org.springframework.boot:spring-boot-starter-web") {
            // exclude Tomcat web server, this project will use Jetty web server
            exclude module: "spring-boot-starter-tomcat"
        }

        // Spring - Jetty - Web server, provisions project with Jetty web server instead of (default) Tomcat web server,
        // for local development - excluded from deploy-able jar
        compile ("org.springframework.boot:spring-boot-starter-jetty")

        // Spring boot - dev tools - allows hot swapping - excluded from deploy-able jar
        compile ("org.springframework.boot:spring-boot-devtools")

        // Kotlin - Library
        compile ("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
        compile ("org.jetbrains.kotlin:kotlin-reflect")

        // Jackson - JSON Serialization / Deserialization
        compile ("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")
        compile ("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
        compile ("joda-time:joda-time")
        compile ("org.jadira.usertype:usertype.core:3.1.0.CR1")
        compile ("com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.2.1")
        compile ("com.fasterxml.jackson.datatype:jackson-datatype-joda")

        // Spring test - test framework
        testCompile ("org.springframework.boot:spring-boot-starter-test")
        testCompile ("junit:junit:$jUnitVersion")
        testCompile ("io.kotlintest:kotlintest:$kotlinTestVersion")

        // AWS - provision the Spring Boot application with the AWS lambda container so it can run as an AWS lambda Function

        // Lambda-logging - AWS logging
        compile ("io.symphonia:lambda-logging:$lamdaLoggingVersion")

        // Lambda - Java container for Spring
        compile ("com.amazonaws.serverless:aws-serverless-java-container-spring:$lambaSpringContainerVersion")

        // OkHttp - Http client
        compile ("com.squareup.okhttp3:okhttp:$okHttpVersion")

        // Sentry.io - Error monitoring
        compile ("io.sentry:sentry-spring:$sentryVersion")

        // Retrofit - HTTP client
        compile ("com.squareup.retrofit2:retrofit:${retrofitVersion}")
        compile ("com.squareup.retrofit2:converter-gson:${retrofitVersion}")
        compile ("com.squareup.okhttp3:logging-interceptor:${retrofitInterceptorVersion}")

        // JSlack - Slack Message sender
        compile group: 'com.github.seratch', name: 'jslack', version: '1.5.4'

        // Javax Mail - Mail sender
        compile ("javax.mail:javax.mail-api:$mailApiVersion")
        compile ("com.sun.mail:javax.mail:$mailApiVersion")

        // AWS - SES - SDK Mail service
        compile ("com.amazonaws:aws-java-sdk-ses:$sesSdkVersion")

        // Thymeleaf - HTML templating
        compile ("org.thymeleaf:thymeleaf-spring5:$thymeleafVersion")
        compile ("org.thymeleaf:thymeleaf:$thymeleafVersion")

        compile 'ru.gildor.coroutines:kotlin-coroutines-retrofit:1.1.0'
    }

    /**
     * Configure the shaded jar with custom settings, like for example the main attribute class.
     */
    jar {
        enabled = true
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    }

    bootJar {
        enabled = true
    }

    /**
     * Configure the shaded jar.
     */
    shadowJar {
        // append the classifier to the build archive as identifier for deploy-able jar
        classifier = 'aws'

        // Required for Spring
        mergeServiceFiles()

        append 'META-INF/spring.handlers'
        append 'META-INF/spring.schemas'
        append 'META-INF/spring.tooling'

        transform(PropertiesFileTransformer) {
            paths = [
                    'META-INF/spring.factories',
                    'META-INF/spring.provides',
                    'META-INF/spring-autoconfigure-metadata.properties',
            ]
            mergeStrategy = "append"
        }
    }

    /**
     * Note that: we don't want the following dependency in our shadowedJar
     * because, it is NOT need when creating an archive for deploying a Function to the cloud,
     * it is used ONLY for LOCAL development.
     */
    //FIXME For now manually uncomment this block on manual deployment
//    configurations {
//        runtime.exclude module: "spring-boot-starter-web"
//        runtime.exclude module: "spring-boot-starter-test"
//        runtime.exclude module: "spring-boot-devtools"
//        runtime.exclude module: "spring-boot-starter-jetty"
//        runtime.exclude module: "junit"
//        runtime.exclude module: "kotlintest"
//        runtime.exclude module: "sonarqube-gradle-plugin"
//    }

    jacocoTestReport {
        group = "Reporting"
        reports {
            xml.enabled true
            csv.enabled false
        }
    }

    test {
        reports {
            junitXml.enabled = true
            html.enabled = true
            reports.junitXml.destination = file("$buildDir/xml")
            reports.html.destination = file("$buildDir/html")
            testLogging.showStandardStreams = true
        }
    }

    /**
     * Tasks to deploy a server-less function module.
     *
     * Make sure serverless npm package is installed, @link: https://serverless.com/framework/docs/providers/aws/guide/installation/
     *
     * Run example:
     *
     * ./gradlew module-name:deploy -Pstage=dev|test|stage|prod -Pprofile=aws-credentials-profile-name --stacktrace
     *
     * The gradle command will call the serverless plugin with the following default flags:
     *
     * sls deploy --verbose --region eu-west-1 '--stage', dev --aws-profile oceanpremium-serverless-publisher
     *
     * - stage: defaults to 'dev' if no explicit 'stage' flag is passed
     * - region: defaults to 'eu-west-1' for deployment
     * - Needs a mandatory AWS credentials profile name of: [oceanpremium-serverless-publisher] setup in an AWS credentials file
     *
     * See for info on setting up an AWS credentials profile:
     * @link: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html
     * @link: https://serverless.com/framework/docs/providers/aws/cli-reference/config-credentials/
     */
    //noinspection GroovyAssignabilityCheck
    task deploy(type: Exec) {
        group 'ocean-premium'
        dependsOn("shadowJar")
        description 'Deploy serverless function to remote'

        def deployRegion = "eu-west-1"
        def stagePropertyName = "stage"
        def profilePropertyName = "profile"
        def stageToDeployTo = "dev"
        def deployProfileName = "oceanpremium-serverless-publisher"
        def awsProfileToUse = deployProfileName
        def awsProfileConfigLink = "https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html"
        def serverlessAwsProfileConfigLink = "https://serverless.com/framework/docs/providers/aws/cli-reference/config-credentials/"

        doFirst {
            // Grab stage flag value
            if (project.hasProperty(stagePropertyName)) {
                stageToDeployTo = findProperty(stagePropertyName)
                println("Stage to deploy to: $stageToDeployTo")
            } else {
                println("No explicit stage flag provided, reverting to default stage to deploy: $stageToDeployTo")
            }

            // Grab profile flag value
            if (project.hasProperty(profilePropertyName)) {

                awsProfileToUse = findProperty(profilePropertyName)

                if (awsProfileToUse != deployProfileName) {
                    throw new GradleException("The profile passed does not match the mandatory profile name: [$deployProfileName], make sure a profile is setup with the name: [$deployProfileName] " +
                            "in your AWS credentials file. See here for more info on setting up an AWS profile: $awsProfileConfigLink\n$serverlessAwsProfileConfigLink")
                }
            } else {
                throw new GradleException("Did not provide profile flag: -Pprofile=$deployProfileName in the deploy command, " +
                        "make sure to setup a profile with the name: [$deployProfileName], in your AWS credentials file." +
                        "\nSee here for more info on setting up a AWS profile: $awsProfileConfigLink\n$serverlessAwsProfileConfigLink\n\nThen run the deploy command again:\n\n" +
                        "./gradlew $project.name:deploy -Pstage=dev|test|stage|prod -Pprofile=$deployProfileName")
            }
        }

        commandLine 'sls', 'deploy', '--verbose', '--region', "$deployRegion", '--stage', "$stageToDeployTo", '--aws-profile', "$awsProfileToUse"
    }

    /**
     * Task to converts Swagger spec (swagger.yml) file to OpenAPI spec (swagger.json) so it can be imported into Postman.
     *
     * Make sure swagger codegen npm package is installed, @link: https://github.com/swagger-api/swagger-codegen
     */
    //noinspection GroovyAssignabilityCheck
    task generateSwaggerJson(type: Exec) {
        group 'ocean-premium'
        description 'Generate openapi.json file from swagger.yml'
        def resourcesPath = "./src/main/resources"

        workingDir resourcesPath

        doLast {
            println("Cleanup of resources that are generated by swagger-codegen in: ${resourcesPath}")

            delete fileTree(resourcesPath) {
                include 'README.md'
                include '.swagger-codegen-ignore'
            }

            delete "${resourcesPath}/.swagger-codegen"
        }

        commandLine 'swagger-codegen', 'generate', '-i', 'swagger.yml', '-l', 'openapi'
    }
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
    }
}

test {
    reports {
        junitXml.enabled = true
        html.enabled = true
        reports.junitXml.destination = file("$buildDir/xml")
        reports.html.destination = file("$buildDir/html")
        testLogging.showStandardStreams = true
    }
}

repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
    maven { url 'https://dl.bintray.com/konrad-kaminski/maven' }
}

dependencies {
    // Register every gradle module in the top-level project dependencies list
    compile project(':core')
    compile project(':auth')
    compile project(':products')
    compile project(':locations')
}
